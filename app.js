var express = require("express");
var path = require("path");
var cookieParser = require("cookie-parser");
var logger = require("morgan");
var passport = require("passport");
const swaggerUi = require("swagger-ui-express");
const swaggerJSDoc = require("swagger-jsdoc");
const cors = require("cors");

require("./config/passport");

var indexRouter = require("./routes/index");
var usersRouter = require("./routes/users");
var authRouter = require("./routes/auth");
var resourcesRoutes = require("./routes/resources");
var tagsRoutes = require("./routes/tags");

var app = express();

var whitelist = ["http://localhost:8080", "http://localhost:3000"];
var corsOptions = {
  origin: function (origin, callback) {
    if (!origin || whitelist.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error("Not allowed by CORS"));
    }
  },
  credentials: true,
};
//app.options('*', cors(corsOptions));
app.use(cors(corsOptions));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(passport.initialize());

app.use(express.static(path.join(__dirname, "public")));

const options = {
  swaggerDefinition: {
    // Like the one described here: https://swagger.io/specification/#infoObject
    info: {
      title: "Resources API",
      version: "1.0.0",
      description: "Test Express API with autogenerated swagger doc",
    },
  },
  // List of files to be processes. You can also set globs './routes/*.js'
  apis: ["./routes/*.js"],
};
const swaggerSpec = swaggerJSDoc(options);

app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

app.use("/", indexRouter);
app.use("/auth", authRouter);
app.use("/users", usersRouter);
app.use("/resources", resourcesRoutes);
app.use("/tags", tagsRoutes);

app.use((err, req, res, next) => {
  let responseStatusCode = 500;
  let responseObj = {
    success: false,
    data: [],
    error: err,
    message: "There was an internal server error",
  };

  // if request has error
  if (err) {
    // if jwt expired, send 401
    if (err === "jwt expired") {
      responseStatusCode = 401;
      responseObj.message =
        "You cannot get the details. You are not authorized to access this protected resource";
    }
  }

  if (!res.headersSent) {
    res.status(responseStatusCode).json(responseObj);
  }
});

module.exports = app;
